package app.mp3Editor;
/*
 * Created by Mars Tan on 12/1/2016.
 * Copyright ISOTOPE Studio
 */

import com.mpatric.mp3agic.*;
import io.fileOperation.Write;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class EditorMain {

    private static List<File> fileList = new ArrayList<>();

    private static List<String> log = new ArrayList<>();

    private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss");
    private static final SimpleDateFormat sdf2 = new SimpleDateFormat("[yyyy-MM-dd HH:mm:ss] ");

    private static final String path = "C:\\Users\\Mars Tan\\Desktop\\mp3\\";

    public static void main(String args[]) {

        File root = new File(path);

        try {
            addAllmp3Files(root);
            for (File mp3 : fileList) {
                log("Now Processing " + mp3.getName());
                processFile(mp3);
                log("");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < log.size(); i++) {
            sb.append(log.get(i) + "\n");
        }
        Date date = new Date();
        String dateString = sdf.format(date);
        Write.write(new File(path + dateString + ".log"), sb.toString());
    }

    private static void addAllmp3Files(File dir) throws Exception {
        File[] fs = dir.listFiles();
        for (File file : fs) {
            if (file.isDirectory()) {
                log("Folder: " + file.getAbsolutePath());
                try {
                    addAllmp3Files(file);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                if (file.getName().endsWith(".mp3")) {
                    fileList.add(file);
                    log("\tAdded file " + file.getName());
                }
            }
        }
    }

    private static void processFile(File mp3) {
        Mp3File mp3file;
        try {
            mp3file = new Mp3File(mp3);
            final Info info = getInfo(mp3.getName());
            ID3v1 id3v1Tag = new ID3v1Tag();
            id3v1Tag.setTrack(info.getEpisode() + "");
            id3v1Tag.setArtist("The Big Bang Theory");
            id3v1Tag.setTitle(info.getName());
            id3v1Tag.setAlbum("The Big Bang Theory Season " + info.getSeason());
            id3v1Tag.setComment("Generated by Mars");
            mp3file.setId3v1Tag(id3v1Tag);
            mp3file.save(mp3.getParent() + "\\" + info.getName() + "mp3");
            log("Track: " + id3v1Tag.getTrack());
            log("Artist: " + id3v1Tag.getArtist());
            log("Title: " + id3v1Tag.getTitle());
            log("Album: " + id3v1Tag.getAlbum());
            log("Comment: " + id3v1Tag.getComment());
        } catch (IOException | UnsupportedTagException | InvalidDataException | NotSupportedException e) {
            log(getStackTrace(e));
        }
    }

    private static Info getInfo(String s) {
        int sub = s.indexOf("Theory");
        String info[] = s.substring(sub + 7, sub + 13).split("(E|S)");
        int season = Integer.parseInt(info[1]);
        int episode = Integer.parseInt(info[2]);
        return new Info(season, episode);
    }

    private static class Info {
        private int season;
        private int episode;

        Info(int season, int episode) {
            this.season = season;
            this.episode = episode;
        }

        int getSeason() {
            return season;
        }

        int getEpisode() {
            return episode;
        }

        String getName() {
            return "The Big Bang Theory. Season " + season + " Episode " + episode + ".";
        }
    }

    private static void log(String info) {
        log.add(sdf2.format(new Date()) + info);
        System.out.println(info);
    }

    private static String getStackTrace(Throwable t) {
        StringWriter sw = new StringWriter();
        try (PrintWriter pw = new PrintWriter(sw)) {
            t.printStackTrace(pw);
            return sw.toString();
        }
    }

}
